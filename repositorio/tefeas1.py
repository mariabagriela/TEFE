# -*- coding: utf-8 -*-
"""TefeAs1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kKJHnwtkOwk6DSzwfNjfA4H_wq34ToCN
"""

import numpy as np
import matplotlib.pyplot as plt

#Questão 1
np.random.seed(12803112)
x_0 = 100

for n in range(9):
  s = 4 + 2*n
  x = x_0 + s*np.random.randn()
  print(f"{x:.3f}(desvpad = {s}) \n erro = {x-x_0:.3f}")

#Questão 2
x_0 = 500
s = 50
x = []
y = []
for i in range(100):
  x.append(x_0 + s*np.random.randn())
  y.append(np.mean(x))

fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_title('Média dos n primeiros dados simulados')
ax.set_ylabel('y(n) - média obtida')
ax.set_xlabel('n (número de dados simulados)')
plt.axhline(500)
plt.plot(y, 'k-')
plt.show()

#Questão 3
x_0 = np.deg2rad(75)
s = np.deg2rad(10)

def w(x):
  return np.sin(x)

N = 10000
Ws = []
for i in range(N):
  x = x_0 + s*(np.random.randn())
  Ws.append(w(x))

sW = np.std( Ws, ddof=1 )
print(f'sW = {sW:.10f}')

w = np.sin(x_0)
sw = np.absolute(np.cos(x_0))*s
print(f'sw = {sw:.10f}')

dif = 100*(sW - sw)/sW
print(f'diferença = {dif:.5f}')

fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_title('Histograma dos valores de w obtidos')
ax.set_ylabel('Frequência')
ax.set_xlabel('Valor de w obtido (rad)')
plt.hist(Ws, edgecolor = 'k');

#Questão 3. d
x_0 = np.deg2rad(75)
s = np.deg2rad(1)

def w(x):
  return np.sin(x)

N = 10000
Ws = []
for i in range(N):
  x = x_0 + s*(np.random.randn())
  Ws.append(w(x))

sW = np.std( Ws, ddof=1 )
print(f'sW = {sW:.10f}')

w = np.sin(x_0)
sw = np.absolute(np.cos(x_0))*s
print(f'sw = {sw:.10f}')

dif = 100*(sW - sw)/sW
print(f'diferença = {dif:.5f}')

fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_title('Histograma dos valores de w obtidos')
ax.set_ylabel('Frequência')
ax.set_xlabel('Valor de w obtido (rad)')
plt.hist(Ws, edgecolor = 'k');

#Questão 4.a
def experimento(n,t_0,st):
  t = t_0 + st*np.random.randn(n)
  return t

def simula(n, t_0 ,st, H):
  tm = np.mean(experimento(n,t_0,st))
  a = (2*H)/(tm*tm)
  return a

def simulacao():
  st = 0.15
  n = 400
  M = 10000
  a = []
  for i in range(M):
    a.append(simula(n,t_0,st,H))
  return a

H = 34
t_0 = 2.748
a_0 = (2*H)/(t_0*t_0)
a = simulacao()
sa = np.std(a, ddof=1)
print(f'sa = {sa:.5f} m/s²')
print(f'a_0 = {a_0}')

#Questão 4.b
fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_title('Histograma dos valores de a obtidos')
ax.set_ylabel('Frequência')
ax.set_xlabel('Valor de a obtido (m/s²)')
plt.axvline(a_0, color = 'red')
plt.hist(a, edgecolor = 'k');

#Questão 4.c
#1
vezesmaior = len(np.where(np.array(a) >= a_0)[0])
print(f"a é maior que a_0 em {vezesmaior} das simulações.")

#2
absdif = len(np.where(np.array(a)-a_0 <= sa)[0])
print(f"|a-a_0| é menor que sa em {absdif} das simulações.")

#Questão 5.a
def simulacao():
  st = 0.15
  n = 400
  M = 10000
  af = []
  for i in range(M):
    af.append(simula(n,t_0,H,st))
  return af

def experimento(n,t_0,H,st):
  t = t_0 + st*np.random.randn(n)
  a = (2*H)/(np.multiply(t,t))
  return t,a

def simula(n, t_0 ,H,st):
  t,a = experimento(n,t_0,H,st)
  return np.mean(a)

H = 34
t_0 = 2.748
a_0 = (2*H)/(t_0*t_0)
af = simulacao()
saf = np.std(af, ddof=1)
print(f'saf = {saf:.5f} m/s²')

#Questão 5.b
fig = plt.figure()
ax = fig.add_subplot(111)
ax.set_title('Histograma dos valores de af obtidos')
ax.set_ylabel('Frequência')
ax.set_xlabel('Valor de af obtido (m/s²)')
plt.axvline(a_0, color = 'red')
plt.hist(af, edgecolor = 'k');

#Questão 5.c
#1
vezesmaior = len(np.where(np.array(af) >= a_0)[0])
print(f"af é maior que a_0 em {vezesmaior} das simulações.")

#2
absdif = len(np.where(np.array(af)-a_0 <= saf)[0])
print(f"|af-a_0| é menor que saf em {absdif} das simulações.")

