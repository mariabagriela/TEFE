# -*- coding: utf-8 -*-
"""TefeAs5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/178ip92mTf0fBpgne2VYClhuGbld5LO7K
"""

import numpy as np
import matplotlib.pyplot as plt
import scipy.stats

#@title Questão 1
np.random.seed(12803112)
M = 10_000
N = 3
L = N-1
x0 = 50
sx0 = 10

# item b)
t2 = 4.53
t = []

for i in range(M):
  x = x0 + np.random.randn(N)*sx0
  xm = np.mean(x)
  sx = np.sqrt(sum(k for k in (x - xm)**2) / L)
  sxm = sx / np.sqrt(N)

  t.append((xm - x0) / sxm)

f_t2 = sum(1 for j in np.abs(np.array(t)) if j <= t2) / M
sf_t2 = np.sqrt(M * f_t2 * (1 - f_t2)) / M
print(f'frequencia_t = {f_t2:.4f} ± {sf_t2:.4f}')

plt.figure();
plt.hist(t,bins = 200);
plt.title(f'Histograma dos valores de $t$ obtidos');
plt.xlabel('Valores de $t$', fontsize=14);
plt.ylabel('Frequência', fontsize=14);
plt.xlim(-30,30)

# item c)
z2 = 2
sm0 = sx0 / np.sqrt(N)
z = []
for i in range(M):
  x1 = x0 + np.random.randn(N)*sx0
  xm1 = np.mean(x1)
  z.append((xm1 - x0) / sm0)

f_z2 = sum(1 for j in np.abs(np.array(z)) if j <= z2) / M
sf_z2 = np.sqrt(M * f_z2 * (1 - f_z2)) / M
print(f'frequencia_z = {f_z2:.4f} ± {sf_z2:.4f}')

plt.figure();
plt.hist(z,bins = 50, color = 'green');
plt.title(f'Histograma dos valores de $z$ obtidos');
plt.xlabel('z', fontsize=14);
plt.ylabel('Frequência', fontsize=14);
plt.xlim(-5,5);

#@title Questão 1.d)
np.random.seed(803112)
x_d = []
for i in range(N):
  x_d.append(x0 + np.random.randn()*sx0 )
xm_d = np.mean(x_d)
sx_d = np.sqrt(sum(k for k in (x_d - xm_d)**2) / L)
sxm_d = sx_d / np.sqrt(N)

t_d = np.abs((xm_d - x0)) / sxm_d

print(f'xm = {xm_d:.2f} ± {sxm_d:.2f}')

print(f'teste t = {t_d:.3f}')

p = scipy.stats.t(df=L).sf(abs(t_d))
print(f'p-valor = {2*p:.5f}')

#@title Questão 1.e)
np.random.seed(3112)
z_e = []
s_e = sx0 / np.sqrt(N)
x_e = []

for j in range(N):
  x_e.append(x0 + np.random.randn()*sx0)
xm_e = np.mean(x_e)


z_e = ((xm_e - x0) / s_e)

print(f'xm = {xm_e:.2f} ± {s_e:.2f}')

print(f'teste z = {z_e:.3f}')

p_ex = scipy.stats.norm().sf(abs((z_e)))
print(f'p-valor = {2*p_ex:.5f}')

#@title Questão 2
np.random.seed(12803112)
N_2 = 100
ne = 65
prob = 0.5
M = 10_000

def cara_coroa(N_2):
  cont = 0
  for i in range(N_2):
      c = np.random.randint(0,2) #cara = 1
      cont+=c
  return cont

conta = []
for i in range(M):
  kont = cara_coroa(N_2)
  conta.append(kont)

maior = menor = 0
for i in range(len(conta)):
  if conta[i] >= ne:
    maior+=1 
  if conta[i] <= (N_2-ne):
    menor+=1

f1 = maior/M
f2 = menor/M

p_valor = f1+f2

print(f'vezes maior = {maior}')
print(f'vezes menor = {menor}')
print(f'p-valor = {p_valor} = {100*p_valor}%')

#@title Questão Extra
np.random.seed(12803112)

N_e = 21
L_e = N_e-1

# item b)
t2_ex = 2.13
t_e = []

for i in range(M):
  x_ex = x0 + np.random.randn(N_e)*sx0
  xm_ex = np.mean(x_ex)
  sx_ex = np.sqrt(sum(k for k in (x_ex - xm_ex)**2) / L_e)
  sxm_ex = sx_ex / np.sqrt(N_e)

  t_e.append((xm_ex - x0) / sxm_ex)

f_t2_e = sum(1 for j in np.abs(np.array(t_e)) if j <= t2_ex) / M
sf_t2_e = np.sqrt(M * f_t2_e * (1 - f_t2_e)) / M
print(f'frequencia_t = {f_t2_e:.4f} ± {sf_t2_e:.4f}')

plt.figure();
plt.hist(t_e,bins = 50);
plt.title(f'Histograma dos valores de $t$ obtidos');
plt.xlabel('t', fontsize=14);
plt.ylabel('Frequência', fontsize=14);
plt.xlim(-5,5)

# item c)
z2 = 2
sm0_e = sx0 / np.sqrt(N_e)
z_ex = []
for i in range(M):
  x1_e = x0 + np.random.randn(N_e)*sx0
  xm1_e = np.mean(x1_e)
  z_ex.append((xm1_e - x0) / sm0_e)

f_z2_e = sum(1 for j in np.abs(np.array(z_ex)) if j <= z2) / M
sf_z2_e = np.sqrt(M * f_z2_e * (1 - f_z2_e)) / M
print(f'frequencia_z = {f_z2_e:.4f} ± {sf_z2_e:.4f}')

plt.figure();
plt.hist(z_ex,bins = 50, color = 'green');
plt.title(f'Histograma dos valores de $z$ obtidos');
plt.xlabel('z', fontsize=14);
plt.ylabel('Frequência', fontsize=14);
plt.xlim(-5,5);

#@title Questão Extra d)
np.random.seed(803112)
x_d_e = []
for i in range(N_e):
  x_d_e.append( x0 + np.random.randn()*sx0)
xm_d_e = np.mean(x_d_e)
sx_d_e = np.sqrt(sum(k for k in (x_d_e - xm_d_e)**2) / L_e)
sxm_d_e = sx_d / np.sqrt(N)

t_d_e = (xm_d_e - x0) / sxm_d_e

print(f'xm = {xm_d_e:.2f} ± {sxm_d_e:.2f}')

print(f'teste t = {t_d_e:.3f}')

p_e = scipy.stats.t(df=L).sf(abs(t_d_e))
print(f'p-valor = {2*p_e:.5f}')

#@title Questão Extra e)
np.random.seed(3112)
z_ex = []
s_ex = sx0 / np.sqrt(N_e)
x_e_ex = []

for j in range(N_e):
  x_e_ex.append(x0 + np.random.randn()*sx0)
xm_e_ex = np.mean(x_e_ex)


z_ex = ((xm_e_ex - x0) / s_ex)

print(f'xm = {xm_e_ex:.2f} ± {s_ex:.2f}')

print(f'teste z = {z_ex:.3f}')

p_ex = scipy.stats.norm().sf(abs((z_ex)))
print(f'p-valor = {2*p_ex:.5f}')